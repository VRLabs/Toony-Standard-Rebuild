//modified version of Shade4PointLights
float3 Shade4PointLights(float3 normal, float3 worldPos)
{
    float4 toLightX = unity_4LightPosX0 - worldPos.x;
    float4 toLightY = unity_4LightPosY0 - worldPos.y;
    float4 toLightZ = unity_4LightPosZ0 - worldPos.z;
    float4 lengthSq = 0;
    lengthSq += toLightX * toLightX;
    lengthSq += toLightY * toLightY;
    lengthSq += toLightZ * toLightZ;
    float4 ndl = 0;
    ndl += toLightX * normal.x;
    ndl += toLightY * normal.y;
    ndl += toLightZ * normal.z;
    // correct NdotL
    float4 corr = rsqrt(lengthSq);
    ndl =  ndl * corr;
    //attenuation
    float4 atten = 1.0 / (1.0 + lengthSq * unity_4LightAtten0);

    float4 diff = max(ndl,0) * atten;
    // final color
    float3 col = 0;
    col += unity_LightColor[0] * diff.x;
    col += unity_LightColor[1] * diff.y;
    col += unity_LightColor[2] * diff.z;
    col += unity_LightColor[3] * diff.w;
    return col;
}

void GetPBRVertexDiffuse()
{
    VertexDirectDiffuse = 0;
    #if defined(VERTEXLIGHT_ON)
        VertexDirectDiffuse = Shade4PointLights(NormalDir, FragData.worldPos);
        VertexDirectDiffuse *= Albedo;
    #endif
}