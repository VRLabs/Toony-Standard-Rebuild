#include "UnityCG.cginc"

struct VertexData 
{
	float4 vertex : POSITION;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD0;
	float2 uv1 : TEXCOORD1;
	float2 uv2 : TEXCOORD2;
	float2 uv3 : TEXCOORD3;
};

struct VertexOutput  
{
	float4 pos : SV_POSITION;
	#if defined(_ALPHATEST_ON) || defined(_ALPHABLEND_ON) || defined(_ALPHAPREMULTIPLY_ON) || defined(_ALPHAMODULATE_ON)
		float2 uv : TEXCOORD0;
		float2 uv1 : TEXCOORD1;
		float2 uv2 : TEXCOORD2;
		float2 uv3 : TEXCOORD3;
	#endif
	#if defined(SHADOWS_CUBE)
		float3 lightVec : TEXCOORD4;
	#endif

	float4 vertex : TEXCOORD5;
};

struct FragmentData 
{
	#if defined(_ALPHABLEND_ON) || defined(_ALPHAPREMULTIPLY_ON) || defined(_ALPHAMODULATE_ON)
		UNITY_VPOS_TYPE pos : VPOS;
	#else
		float4 pos : SV_POSITION;
	#endif
	#if defined(_ALPHATEST_ON) || defined(_ALPHABLEND_ON) || defined(_ALPHAPREMULTIPLY_ON) || defined(_ALPHAMODULATE_ON)
		float2 uv : TEXCOORD0;
		float2 uv1 : TEXCOORD1;
		float2 uv2 : TEXCOORD2;
		float2 uv3 : TEXCOORD3;
	#endif
	#if defined(SHADOWS_CUBE)
		float3 lightVec : TEXCOORD4;
	#endif
	float4 vertex : TEXCOORD5;
};

sampler3D _DitherMaskLOD;
FragmentData FragData;
#if defined(_ALPHATEST_ON) || defined(_ALPHABLEND_ON) || defined(_ALPHAPREMULTIPLY_ON) || defined(_ALPHAMODULATE_ON)
#K#SHADOW_VARIABLES

#K#SHADOW_CODE
#endif

VertexOutput  Vertex (VertexData v) 
{
	VertexOutput  i;
	i.vertex = v.vertex;
	#if defined(SHADOWS_CUBE)
		i.pos = UnityObjectToClipPos(v.vertex);
		i.lightVec = mul(unity_ObjectToWorld, v.vertex).xyz - _LightPositionRange.xyz;
	#else
		i.pos = UnityClipSpaceShadowCasterPos(v.vertex.xyz, v.normal);
		i.pos = UnityApplyLinearShadowBias(i.pos);
	#endif
	#if defined(_ALPHATEST_ON) || defined(_ALPHABLEND_ON) || defined(_ALPHAPREMULTIPLY_ON) || defined(_ALPHAMODULATE_ON)
		i.uv = v.uv;
		i.uv1 = v.uv1;
		i.uv2 = v.uv2;
		i.uv3 = v.uv3;
	#endif
	return i;
}

float4 Fragment (FragmentData i) : SV_TARGET 
{
	FragData = i;
	#if defined(_ALPHATEST_ON) || defined(_ALPHABLEND_ON) || defined(_ALPHAPREMULTIPLY_ON) || defined(_ALPHAMODULATE_ON)
		#K#SHADOW_FRAGMENT_FUNCTION
	#endif

	#if defined(SHADOWS_CUBE)
		float depth = length(i.lightVec) + unity_LightShadowBias.x;
		depth *= _LightPositionRange.w;
		return UnityEncodeCubeShadowDepth(depth);
	#else
		return 0;
	#endif
}