half3 GetSHLength()
{
    half3 x, x1;
    x.r = length(unity_SHAr);
    x.g = length(unity_SHAg);
    x.b = length(unity_SHAb);
    x1.r = length(unity_SHBr);
    x1.g = length(unity_SHBg);
    x1.b = length(unity_SHBb);
    return x + x1;
}

float FadeShadows (FragmentData i, float attenuation) 
{
    #if HANDLE_SHADOWS_BLENDING_IN_GI && !defined (SHADOWS_SHADOWMASK)
        // UNITY_LIGHT_ATTENUATION doesn't fade shadows for us.
        float viewZ = dot(_WorldSpaceCameraPos - i.worldPos, UNITY_MATRIX_V[2].xyz);
        float shadowFadeDistance = UnityComputeShadowFadeDistance(i.worldPos, viewZ);
        float shadowFade = UnityComputeShadowFade(shadowFadeDistance);
        attenuation = saturate(attenuation + shadowFade);
    #endif
    #if defined(LIGHTMAP_ON) && defined (SHADOWS_SHADOWMASK)
        // UNITY_LIGHT_ATTENUATION doesn't fade shadows for us.
        float viewZ = dot(_WorldSpaceCameraPos - i.worldPos, UNITY_MATRIX_V[2].xyz);
        float shadowFadeDistance = UnityComputeShadowFadeDistance(i.worldPos, viewZ);
        float shadowFade = UnityComputeShadowFade(shadowFadeDistance);
        float bakedAttenuation = UnitySampleBakedOcclusion(i.lightmapUV, i.worldPos);
        attenuation = UnityMixRealtimeAndBakedShadows(attenuation, bakedAttenuation, shadowFade);
        //attenuation = saturate(attenuation + shadowFade);
        //attenuation = bakedAttenuation;

    #endif
    return attenuation;
}

void GetLightData()
{
    UNITY_LIGHT_ATTENUATION(attenuation, FragData, FragData.worldPos);
    attenuation = FadeShadows(FragData, attenuation);
    LightAttenuation = attenuation;

    //lightmap sampling
    #if defined(LIGHTMAP_ON)
        Lightmap = DecodeLightmap(UNITY_SAMPLE_TEX2D(unity_Lightmap, FragData.lightmapUV));
        
        //directional map sampling
        #if defined(DIRLIGHTMAP_COMBINED)
            LightmapDirection = UNITY_SAMPLE_TEX2D_SAMPLER(unity_LightmapInd, unity_Lightmap, FragData.lightmapUV);
        #endif
    #endif
    //dynamic Lightmap sampling
    #if defined(DYNAMICLIGHTMAP_ON)
        DynamicLightmap = DecodeRealtimeLightmap( UNITY_SAMPLE_TEX2D(unity_DynamicLightmap, FragData.dynamicLightmapUV));
        
        #if defined(DIRLIGHTMAP_COMBINED)
            DynamicLightmapDirection = UNITY_SAMPLE_TEX2D_SAMPLER(unity_DynamicDirectionality, unity_DynamicLightmap, FragData.dynamicLightmapUV);
        #endif
    #endif

    LightColor = float4(_LightColor0.rgb, LightAttenuation);
    SpecLightColor = LightColor;
    IndirectDiffuse = 0;
    //only counts it in the forwardBase pass
    #if defined(UNITY_PASS_FORWARDBASE)

        LightColor.rgb += float3(unity_SHAr.w, unity_SHAg.w, unity_SHAb.w);
        //some random magic to get more tinted by the ambient
        LightColor.rgb = lerp(GetSHLength(), LightColor.rgb, .75);
        SpecLightColor = LightColor;

        #if defined(LIGHTMAP_ON)
            IndirectDiffuse = Lightmap;
            #if defined(DIRLIGHTMAP_COMBINED)
                IndirectDiffuse = DecodeDirectionalLightmap(IndirectDiffuse, LightmapDirection, NormalDir);
            #endif
        #endif

        #if defined(DYNAMICLIGHTMAP_ON)
            
            #if defined(DIRLIGHTMAP_COMBINED)
                IndirectDiffuse += DecodeDirectionalLightmap(DynamicLightmap, DynamicLightmapDirection, NormalDir);
            #else
                IndirectDiffuse += DynamicLightmap;
            #endif
        #endif

        #if !defined(LIGHTMAP_ON) && !defined(DYNAMICLIGHTMAP_ON)

            //if there's no direct light, we get the probe light direction to use as direct light direction and
            //we consider the indirect light color as it was the direct light color.
            //also taking into account the case of a really low intensity being considered like non existent due to it no having
            //much relevance anyways and it can cause problems locally on mirrors if the avatat has a very low intensity light
            //just for enabling the depth buffer.
            IndirectDiffuse = float3(unity_SHAr.w, unity_SHAg.w, unity_SHAb.w);
            if(any(_WorldSpaceLightPos0.xyz) == 0 || _LightColor0.a < 0.01)
            {
                LightDir = normalize(unity_SHAr.xyz + unity_SHAg.xyz + unity_SHAb.xyz);
                HalfDir = Unity_SafeNormalize(LightDir + ViewDir);
                SpecLightColor.rgb = IndirectDiffuse;
                LightColor.a = 1;
                if(_DirectLightMode > 0)
                {  
                    LightColor.rgb = IndirectDiffuse;            
                    IndirectDiffuse = 0;
                }
            }  
        #endif     
    #endif
}